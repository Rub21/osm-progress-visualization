language: cpp

compiler:
 - gcc

env:
  matrix:
   # static_build == portable, statically linked OSRM and deps
   # shared_build == non-portable, shared libraries via package manager
   - NODE_NVM_VERSION="0.10" RUN_BUILD="static_build"
   - NODE_NVM_VERSION="0.10" RUN_BUILD="shared_build"
  global:
   - secure: Ac0sNxaMmm/4NLJwjB5W74wNNrXH2cFz4qADJSJwGr+p78NVrp+3B70Nlffg6sf6sq57KeoQi5EbUNSa4fjLS2FqJJDr5U8cOA4nt5tPGm8cucdAyr4VCREEddtV4jfIcNN0/I/DKIK4d744SmpqomVYqTUFOVK8LOT4vAX3tTo=
   - secure: bsD0VyN6F6+ratG/C2AB1GrbmaPGyvaAgjZXd7tsQPYl+TR3BT643T9GikgN5IJdbjVBOJDfSqk76g/UlfLl9bRnoybP8tJsZJhCyMYKyRNGJZBIOyEVe6j5FrcT5ejBO0EIGaw2fXwSkG92pg7CFQOAPkVNgcl/H0XNdMa3Q/8=
before_install:
# check if tag exists and matches package.json
- scripts/validate_tag.sh
# get commit message
- COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\n')
# put node-pre-gyp on path
- export PATH=./node_modules/.bin/:$PATH
# here we set up the node version on the fly based on the matrix value.
# This is done manually so that it is easy to flip the 'language' to
# objective-c in another branch (to run the same travis.yml on OS X)
- git clone https://github.com/creationix/nvm.git ../.nvm
- source ../.nvm/nvm.sh
- nvm install $NODE_NVM_VERSION
- nvm use $NODE_NVM_VERSION
- node --version
- npm --version

install:
# set a few env settings for the static build script
- NODE_MODULE_ROOT=$(pwd)
- TMP_DEPS_DIR=$(mktemp -d -t XXXXXXXXXXX)
# WARNING: this script modifies the environment
- source ./scripts/${RUN_BUILD}.sh
- cd ${NODE_MODULE_ROOT}

before_script:
- npm install mocha aws-sdk
# install from source, ensure this works first
- git clone https://github.com/osmcode/libosmium.git ../libosmium
- npm install --build-from-source
- if [[ `uname -s` == 'Darwin' ]]; then otool -L ./lib/binding/* || true; fi
- if [[ `uname -s` == 'Linux' ]]; then readelf -d ./lib/binding/* || true; fi
- npm test

script:
# now we publish the binary, if needed
- PUBLISH_BINARY=false
# check if this is a git tag built statically to be portable
- if [[ $RUN_BUILD == "static_build" ]] && [[ $TRAVIS_BRANCH == `git describe --tags --always HEAD` ]]; then echo PUBLISH_BINARY;PUBLISH_BINARY=true; fi;
# or check if we are manually requesting binary publishing via a commit keyword
- if [[ $RUN_BUILD == "static_build" ]] && test "${COMMIT_MESSAGE#*'[publish binary]'}" != "$COMMIT_MESSAGE"; then echo PUBLISH_BINARY;PUBLISH_BINARY=true; fi;
# if either are true, then publish the binary
# Note: this publishing is done here, in the 'script' section, instead of the 'after_success'
# since we want any failure here to stop the build immediately
- if [[ $PUBLISH_BINARY == true ]]; then node-pre-gyp package publish; fi
# now clean up to prepare to re-install from remote binary
- node-pre-gyp clean
# now install from published binary
# Note: we capture the error here so that if the install fails we can unpublish
- INSTALL_RESULT=0
- if [[ $PUBLISH_BINARY == true ]]; then INSTALL_RESULT=$(npm install --fallback-to-build=false > /dev/null)$? || true; fi
# if install returned non zero (errored) then we first unpublish and then call false so travis will bail at this line
- if [[ $INSTALL_RESULT != 0 ]]; then echo "returned $INSTALL_RESULT";node-pre-gyp unpublish;false; fi
# If success then we arrive here so lets clean up
- node-pre-gyp clean
